Python fournit par défaut une implémentation des fonctions de hachage MD5, SHA-1,
SHA-224, SHA-256, SHA-384 et SHA-512. Ceci est très pratique.

>>> from hashlib import sha256
>>> x = sha256('UGLIX'.encode())
>>> x.digest()
b')\rm\x9b\xb6\xdd\xe4\xb8\r\tQZ\x90\xfd\xbd\x15Y\xad\x8b\xec;yfd\x11\x1f@\xa2N5"\xdb'
>>> x.hexdigest()
'290d6d9bb6dde4b80d09515a90fdbd1559ad8bec3b796664111f40a24e3522db'

Attention, il faut fournir des bytes(), donc ne pas oublier d'encoder les str().
Cf. la documentation sur les chaînes de caractères pour plus de précisions.

Il n'est pas obligatoire de fournir les données à hacher en une seule fois.
>>> x = sha256('UGLIX rocks'.encode())
>>> y = sha256()
>>> y.update('UGLIX'.encode())
>>> y.update(' rocks'.encode())
>>> x.digest() == y.digest()
True


Les spécifications cryptographique indiquent parfois qu'il faut hacher la
concaténation de plus données, par exemple avec des notations du type :
    
    mac = H(Key || Message)

Ceci peut simplement de faire comme ça :
>>> x = sha256()
>>> x.update(Key)
>>> x.update(Message)
>>> mac = x.hexdigest()


CAS PARTICULIER DES ENTIERS
---------------------------

Sur le campus, les conventions suivantes ont été adoptées (après des décennies de
debugging et d'incompatibilité dans les API).

*) Si on doit hacher un entier, alors on le convertit en bytes() (en produisant
   l'ordre "big-endian"), et on hache les bytes().

*) Si on doit utiliser le haché comme un entier, alors on le converti en entier
   selon l'ordre "big-endian".

Se reporter à la documentation sur les entiers pour plus de détails.

Exemple : On calcule H(1337 || 'UGLIX'), et on récupère le haché comme un entier

>>> H = sha256()
>>> Key = 1337
>>> Message = 'UGLIX'

>>> size = 2                               # 2 octets suffisent pour le nombre 1337 
>>> H.update(Key.to_bytes(size, byteorder='big'))
>>> H.update(Message.encode())
>>> int(H.hexdigest(), base=16)
87368479139496548753041453892314973402075868428433709245093784034401128089181