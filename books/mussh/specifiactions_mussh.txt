PROTOCOLE mussh (mINIMALIST uNIVERSITY sECURE shELL)
====================================================

Le protocole TELNET transmet les données en clair, ce qui pose évidemment des
problèmes de sécurité.  Pour y répondre, un protocole nommé MUSSH (Minimalist 
University Secure SHell) a été mis au point.  Ce protocole permet d'établir un 
tunnel chiffré après avoir réalisé un échange de clef authentifié.  À l'intérieur 
de ce tunnel, les transmissions obéissent au protocole telnet.

Ce protocole est disponible sur le port 6025 du serveur et son usage est
chaudement recommandé.  La plupart des terminaux certifiés compatibles 
contiennent un client MUSSH. Vérifiez la compatibilité de votre matériel.

Malheureusement, les clients telnet usuels (y compris la version libre en python
disponible dans toutes les bonnes bibliothèques) ne gèrent pas nativement le 
protocole MUSSH.  Il est par conséquent recommandé consulter le "hacker's guide" 
avant de tenter de réaliser soi-même son propre client.


À PROPOS DU PROTOCOLE TELNET
----------------------------
    Lorsqu'un utilisateurs ouvre une session sur une machine physique (par exemple 
    dans les salles de TME), il utilise un TERMINAL.  Un processus (typiquement 
    le shell) est lancé par le système d'exploitation pour satisfaire les besoins 
    de l'utilisateur.  Ce processus et le terminal échangent alors des octets.

                            ┌───────┐    ┌──────────┐
                            │ Shell ├────┤ Terminal │
                            └───────┘    └──────────┘


    Lorsqu'une session est établie à distance avec le protocole telnet, une 
    "couche TELNET" s'intercale entre le terminal et l'application.  Elle est 
    invisible pour les deux extrémités.


             Couche TELNET
           ╔═════════════════════════════════════════════════════╗
           ║                                                     ║
┌───────┐  ║  ┌────────────────┐              ┌───────────────┐  ║  ┌──────────┐
│ Shell ├──╫──┤ serveur telnet ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤ client telnet ├──╫──┤ Terminal │
└───────┘  ║  └────────────────┘              └───────────────┘  ║  └──────────┘
           ║                                                     ║
           ╚═════════════════════════════════════════════════════╝


    Nous n'allons pas rentrer ici dans les détails sordides du protocole telnet.
    Il transmet essentiellement les octets directements, mais il faut 
    cependendant savoir que l'octet 0xFF a une signification particulière dans
    ce protocole (il permet au client et au serveur de se transmettre des
    commandes ou de négocier des options).

    Tous les autres octets sont transmis tels quels.  Pour transmettre l'octet
    0xFF lui-même, le protocole telnet procède à un "échappement" et envoie les
    deux octets 0xFFFF.



STRUCTURE GÉNÉRALE DU PROTOCOLE MUSSH
-------------------------------------
    Le protocole MUSSH intercale à son tour un tunnel chiffré entre le client et
    le serveur telnet.  Cette "couche de chiffrement" est invisible pour la
    couche telnet.  Pour des raisons de simplification technique, les données
    échangées sur le réseau à l'intérieur du tunnel chiffré sont elles-mêmes
    "emballées"  dans des NETSTRINGS.  Cet encodage est lui-aussi invisible pour
    la couche de chiffrement.


                                                               ┌──────────┐
                                                               │ Terminal │
                                                               └─────┬────┘
  Couche TELNET                                                      │
╔════════════════════════════════════════════════════════════════════╪═════════╗
║                                                                    │         ║
║                                                            ┌───────┴───────┐ ║
║                                                            │ client telnet │ ║
║                                                            └───────┬───────┘ ║
║    Couche CHIFFREMENT AUTHENTIFIÉ                                  │         ║
║ ╔══════════════════════════════════════════════════════════════════╪═══════╗ ║
║ ║                                                                  │       ║ ║
║ ║                    Couche NETSTRING                              │       ║ ║
║ ║                 ╔══════════════════════════════════════╗         │       ║ ║
║ ║                 ║                                      ║         │       ║ ║
║ ║ ┌────────────┐  ║  ┌───────────┐        ┌───────────┐  ║  ┌──────┴─────┐ ║ ║
║ ║ │ Encryption ├──╫──┤ Netstring ├╌╌╌╌╌╌╌╌┤ Netstring ├──╫──┤ Encryption │ ║ ║
║ ║ └─────┬──────┘  ║  └───────────┘        └───────────┘  ║  └────────────┘ ║ ║
║ ║       │         ║                                      ║                 ║ ║
║ ║       │         ╚══════════════════════════════════════╝                 ║ ║
║ ║       │                                                                  ║ ║
║ ║       │                                                                  ║ ║
║ ╚═══════╪══════════════════════════════════════════════════════════════════╝ ║
║         │                                                                    ║
║ ┌───────┴────────┐                                                           ║
║ │ serveur telnet │                                                           ║
║ └───────┬────────┘                                                           ║
║         │                                                                    ║
╚═════════╪════════════════════════════════════════════════════════════════════╝
          │
      ┌───┴───┐
      │ Shell │
      └───────┘
                                         
    Lorsqu'une couche reçoit des octets de la couche en amont, elle doit les
    traiter puis les transmettre à la couche en aval.  Réciproquement, lorsqu'une
    couche reçoit des octets de la couche en aval, elle doit les traiter et les
    transmettre à la couche en amont.



SPÉCIFICATION DE LA COUCHE NETSTRINGS
-------------------------------------
    Les "netstring" constituent un format de sérialisation très simple de 
    n'importe quel type de données. Sa spécification est accessible ici :

        https://cr.yp.to/proto/netstrings.txt

    Elle consiste à "emballer" les octets reçus en indiquant leur nombre.  
    Lorsqu'on reçoit une séquence d'octets <data> de la couche en amont, on
    envoie à la couche en aval :

        len(<data>):<data>,        (len(<data>) est envoyé en base 10, en ASCII)

    Par exemple, si on reçoit "toto", on transmet "4:toto,".  De manière 
    équivalente si on reçoit "6:foobar," de la couche en aval, on remonte 
    "foobar" à la couche en amont.

    Remarque : lorsque la couche NETSTRING du serveur reçoit une netstring mal 
               formée, elle termine la connection.



SPÉCIFICATION DE LA COUCHE DE CHIFFREMENT AUTHENTIFIÉ
-----------------------------------------------------
    Les données sont chiffrées avec l'AES en mode compteur (cf. spécification
    à part), et authentifiées avec HMAC-SHA256.  Le client et le serveur
    possèdent chacun trois clefs de 128 bits :
    
    - Kaes : la clef de l'AES en mode compteur
    - Kiv  : le vecteur d'initialisation du mode compteur
    - Kmac : la clef de HMAC-SHA256 pour l'authentification

    Si on reçoit la séquence d'octets <data> de la couche en amont, on calcule :

                  <mask> <-- les <len(data>)> prochains octets du flux 
                             pseudo-aléatoire généré par l'AES-128-CTR.

        <encrypted data> <-- <data> XOR <mask>,
                   <tag> <-- HMAC-SHA256(<Kmac>, <data>)
    <authenticated data> <-- <encrypted data> || <tag>

                                 (l'opérateur || désigne la concatenation)

    En on envoie <authenticated data> à la couche en aval.

    Lorsque la couche en aval remonte un message, il est nécessaire de vérifier
    le <tag> avant de le remonter à la couche en amont.  Les messages dont le
    <tag> est incorrect doivent être ignorés.

    Il y a donc trois clefs (Kaes, Kiv, Kmac) par "canal" de communication.  
    Mais attention, il y a deux canaux : un du serveur vers le client, et un du
    client vers le serveur.  Chaque canal maintient donc un état, qui est 
    constitué par l'état interne du générateur pseudo-aléatoire.


PROTOCOLE D'ÉCHANGE DE CLEFS
----------------------------
    Pour faire fonctionner la couche de chiffrement authentifié, il est
    nécessaire que le client et le serveur partagent des clefs symétriques.  Ceci
    se fait avec un échange de clef Diffie-Hellman authentifié par des
    signatures.  Les utilisateurs qui veulent utiliser ce protocole doivent avoir
    un compte avec une clef publique.

    Les utilisateurs doivent posséder les "paramètres" ainsi que la clef publique
    du serveur.  Les paramètres décrivent un groupe (un générateur <g> d'ordre 
    <q> modulo <p>).  Voici les données en question.

    -----BEGIN X9.42 DH PARAMETERS-----
    MIICLAKCAQEAh6jmHbS2Zjz/u9GcZRlZmYzu9ghmDdDyXSzu1ENeOwDgDfjx1hlX
    1Pr330VhsqowFsPZETQJb6o79Cltgw6afCCeDGSXUXq9WoqdMGvPZ+2R+eZyW0dY
    wCLgse9Cdb97bFv8EdRfkIi5QfVOseWbuLw5oL8SMH9cT9twxYGyP3a2Osrhyqa3
    kC1SUmc1SIoO8TxtmlG/pKs62DR3llJNjvahZ7WkGCXZZ+FE5RQFZCUcysuD5rSG
    9rPKP3lxUGAmwLhX9omWKFbe1AEKvQvmIcOjlgpU5xDDdfJjddcBQQOktUMwwZiv
    EmEW0iduEXFfaTh3+tfvCcrbCUrpHhoVlwKCAQA/syybcxNNCy53UGZg7b1ITKex
    jyHvIFQH9Hk6GguhJRDbwVB3vkY//0/tSqwLtVW+OmwbDGtHsbw3c79+jG9ikBIo
    +MKMuxilWuMTQQAKZQGW+THHelfy3fRj5ensFEt3feYqqrioYorDdtKC1u04ZOZ5
    gkKOvIMdFDSPby+Rk7UEWvJ2cWTh38lnwfs/LlWkvRv/6DucgNBSuYXRguoK2yo7
    cxPT/hTISEseBSWIubfSu9LfAWGZ7NBuFVfNCRWzNTu7ZODsN3/QKDcN+StSx4kU
    KM3GfrYYS1I9HbJGwy9jB4SQ8A741kfRSNR5VFFeIyfP75jFgmZLTA9sxBZZAiEA
    jPg2QqcJoJe0R5l2QBKdopmxpH0es3ULowiw/mT1+9M=
    -----END X9.42 DH PARAMETERS-----


    -----BEGIN PUBLIC KEY-----
    MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEMM6kpDWtZnIQauXmCZdg90zLbQt/MLNU
    3158zCQrRxs3MOZF+1nZN6MIM0sZvMs6z9lTbLoTZQyw4QFC6sv3Dg==
    -----END PUBLIC KEY-----

    Le protocole d'échange de clef se déclenche lorsque la couche "TELNET"
    souhaite établir une connection.  Tous les messages sont échangés avec la 
    couche "NETSTRING".
    
     1) Le client choisit un nombre aléatoire <x> modulo <q> et calcule 

            A <-- g**x mod p     
                             (l'opérateur ** désigne l'élévation à la puissance)

        Il réalise une signature numérique, avec sa clef secrète, de la chaine
        de charactères qui représente A en décimal.

        Il transmet un dictionaire sérialisé en JSON contenant les champs
        "username" (de type str), "A" (de type int) et "signature" (de  type
        str, encodé en hexadécimal).

     2) Le serveur vérifie la signature et abandonne la connection si elle est 
        incorrecte, puis il choisit un nombre aléatoire <y> modulo <q>. 
        Il calcule :

            B <-- g**y mod p,
            K <-- A**y mod p.

        Le serveur forme ensuite la chaine de charactères :
            
            S <-- "<A>,<B>,<username>" 

        (en remplaçant les symboles entre chevrons par leurs valeurs 
        respectives, avec les nombres écrits en décimal).  Le serveur réalise une
        signature numérique de la chaine S avec sa clef secrète.  Il renvoie 
        enfin un dictionnaire sérialisé en JSON contenant les champs "B" (int), 
        et "signature" (str, encodé en hexadécimal).
        
     3) Le client doit vérifier la signature (grace à la clef publique du
        serveur) et abandonner la procédure si elle est incorrecte.  Il calcule:

            K <-- B**x mod p.

     4) À ce stade, les deux parties posèdent K et peuvent en déduire leurs
        clefs de session. 

        Pour le canal "serveur --> client" (données émises par le serveur) :

            - Kaes <-- SHA256(<K> || 'A')
            - Kiv  <-- SHA256(<K> || 'B')
            - Kmac <-- SHA256(<K> || 'C')

        Pour le canal "client --> serveur" (données émises par le client) :

            - Kaes <-- SHA256(<K> || 'D')
            - Kiv  <-- SHA256(<K> || 'E')
            - Kmac <-- SHA256(<K> || 'F')

            (<K> désigne la chaine de charactères qui représente K en base 10).

        À chaque fois, seuls les 16 premiers octets du hashé sont retenus.  À
        partir de là, tous les échanges sont chiffrés et authentifiés.  La couche
        TELNET est informée que la connection est établie et l'utilisateur est
        connecté.