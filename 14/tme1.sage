"""
TME #1 : Short Vector
=====================


But     : trouvez un vecteur court dans le réseau engendré par la matrice A.

          A est de dimension n x n, et tous ses coefficients valent zéro
          sauf A_00 = 1, A_ii = p et A_0j = a**j mod p (pour i,j > 0).

          La norme du vecteur trouvé doit être inférieure à L.

n       : 7
a       : 0xb8289dc39f6a05
p       : 0x94be666c123ba6af
L       : 2**55.60


Format  : (x_1, x_2, ..., x_7) avec les x_i en hexadécimal."""

from fpylll import IntegerMatrix, LLL, SVP

# define n, a, p
n = 7
a = 0xaf9a4c1676f5f55
p = 0xcce2e16e6ec40b9

# create a 7 * 7 matrix as a list of lists
A_list = [[0 for _ in range(n)] for _ in range(n)]

# fill the matrix
A_list[0][0] = 1
for i in range(n):
    for j in range(n):
        if i == j:
            A_list[i][j] = p
        if i == 0:
            A_list[0][j] = (a**j) % p

# create IntegerMatrix from list of lists
A = IntegerMatrix.from_matrix(A_list)

lll_A = LLL.reduction(A)

# solve for the shortest vector using the SVP
svp_solution = SVP.shortest_vector(lll_A)
print("LLL-reduced Matrix A:")
print(lll_A)
print("\nShortest Vector in the lattice generated by A:")
print(svp_solution)
print("Hex solution")
svp_hex = svp_solution_hex = [hex(x) for x in svp_solution]
formatted_hex = [('-' if x.startswith('-') else '') + x[3 if x.startswith('-') else 2:] for x in svp_hex]
# formatting
out = '(' + ', '.join(svp_hex) + ')'
print("Shortest Vector in the lattice generated by A (in hex):")
print(out)









